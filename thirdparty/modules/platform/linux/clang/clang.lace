if RUBY_PLATFORM =~ /win32/

else

end

$elfkickers_bin_dir = to_path( '../../../../elfkickers/bin' )
set_global_attribute :c_warning_level, 2

class ClangCppCompiler < SingleFileCompiler

	def compile( infile, outfile )
		dfilename = outfile.to_s.sub(/\.obj/, '.d')
        #@verbose = true

		check_optimized_dependencies(infile.path, dfilename) do
			system_include_dir_options = infile.context.get_attribute_set(:c_system_include_dir).map {|d|['-I', d]}
			include_dir_options = infile.context.get_attribute_set(:c_include_dir).map {|d| ['-I', d] }
			define_options = infile.context.get_attribute_set(:c_define).map {|d| ['-D', d] }
			warning_options = infile.context.get_attribute_set(:c_warning).map {|w| ['-W' + w]}

			case infile.context.get_attribute_value(:c_warning_level)
			when 2
				warning_options << '-Wall' << '-Wextra' << '-Werror' << '-pedantic'
                warning_options << '-Wabi'
                warning_options << '-Waddress-of-temporary'
                warning_options << '-Waddress'
                warning_options << '-Waggregate-return'
                warning_options << '-Wall'
                warning_options << '-Wambiguous-member-template'
                #warning_options << '-Warc-abi'
                #warning_options << '-Warc-non-pod-memaccess'
                #warning_options << '-Warc-retain-cycles'
                #warning_options << '-Warc-unsafe-retained-assign'
                #warning_options << '-Warc'
                warning_options << '-Watomic-properties'
                warning_options << '-Wattributes'
                #warning_options << '-Wavailability'
                warning_options << '-Wbad-function-cast'
                warning_options << '-Wbind-to-temporary-copy'
                #warning_options << '-Wbitwise-op-parentheses'
                warning_options << '-Wbool-conversions'
                warning_options << '-Wbuiltin-macro-redefined'
                warning_options << '-Wc++-compat'
                warning_options << '-Wc++0x-compat'
                warning_options << '-Wc++0x-extensions'
                warning_options << '-Wcast-align'
                warning_options << '-Wcast-qual'
                warning_options << '-Wchar-align'
                warning_options << '-Wchar-subscripts'
                warning_options << '-Wcomment'
                warning_options << '-Wcomments'
                #warning_options << '-Wconditional-uninitialized'
                warning_options << '-Wconversion'
                warning_options << '-Wctor-dtor-privacy'
                warning_options << '-Wcustom-atomic-properties'
                warning_options << '-Wdeclaration-after-statement'
                #warning_options << '-Wdefault-arg-special-member'
                #warning_options << '-Wdelegating-ctor-cycles'
                #warning_options << '-Wdelete-non-virtual-dtor'
                warning_options << '-Wdeprecated-declarations'
                warning_options << '-Wdeprecated-implementations'
                warning_options << '-Wdeprecated-writable-strings'
                warning_options << '-Wdeprecated'
                warning_options << '-Wdisabled-optimization'
                warning_options << '-Wdiscard-qual'
                warning_options << '-Wdiv-by-zero'
                #warning_options << '-Wduplicate-method-arg'
                warning_options << '-Weffc++'
                warning_options << '-Wempty-body'
                #warning_options << '-Wendif-label'
                #warning_options << '-Wexit-time-destructors'
                warning_options << '-Wextra-tokens'
                warning_options << '-Wextra'
                warning_options << '-Wformat-extra-args'
                warning_options << '-Wformat-nonliteral'
                warning_options << '-Wformat-zero-length'
                warning_options << '-Wformat'
                warning_options << '-Wformat=2'
                warning_options << '-Wfour-char-constants'
                warning_options << '-Wglobal-constructors'
                warning_options << '-Wgnu-designator'
                warning_options << '-Wgnu'
                #warning_options << '-Wheader-hygiene'
                warning_options << '-Widiomatic-parentheses'
                warning_options << '-Wignored-qualifiers'
                warning_options << '-Wimplicit-atomic-properties'
                warning_options << '-Wimplicit-function-declaration'
                warning_options << '-Wimplicit-int'
                warning_options << '-Wimplicit'
                warning_options << '-Wimport'
                #warning_options << '-Wincompatible-pointer-types'
                warning_options << '-Winit-self'
                warning_options << '-Winitializer-overrides'
                warning_options << '-Winline'
                warning_options << '-Wint-to-pointer-cast'
                warning_options << '-Winvalid-offsetof'
                warning_options << '-Winvalid-pch'
                warning_options << '-Wlarge-by-value-copy'
                warning_options << '-Wliteral-range'
                warning_options << '-Wlocal-type-template-args'
                warning_options << '-Wlogical-op-parentheses'
                warning_options << '-Wlong-long'
                warning_options << '-Wmain'
                warning_options << '-Wmicrosoft'
                warning_options << '-Wmismatched-tags'
                warning_options << '-Wmissing-braces'
                warning_options << '-Wmissing-declarations'
                warning_options << '-Wmissing-field-initializers'
                warning_options << '-Wmissing-format-attribute'
                warning_options << '-Wmissing-include-dirs'
                warning_options << '-Wmissing-noreturn'
                warning_options << '-Wmost'
                warning_options << '-Wmultichar'
                warning_options << '-Wnested-externs'
                warning_options << '-Wnewline-eof'
                warning_options << '-Wnon-gcc'
                warning_options << '-Wnon-virtual-dtor'
                warning_options << '-Wnonfragile-abi2'
                warning_options << '-Wnonnull'
                warning_options << '-Wnonportable-cfstrings'
                warning_options << '-Wnull-dereference'
                #warning_options << '-Wobjc-nonunified-exceptions'
                warning_options << '-Wold-style-cast'
                warning_options << '-Wold-style-definition'
                warning_options << '-Wout-of-line-declaration'
                warning_options << '-Woverflow'
                warning_options << '-Woverlength-strings'
                warning_options << '-Woverloaded-virtual'
                warning_options << '-Wpacked'
                #warning_options << '-Wpadded'
                warning_options << '-Wparentheses'
                warning_options << '-Wpointer-arith'
                warning_options << '-Wpointer-to-int-cast'
                warning_options << '-Wprotocol'
                warning_options << '-Wreadonly-setter-attrs'
                warning_options << '-Wredundant-decls'
                warning_options << '-Wreorder'
                warning_options << '-Wreturn-type'
                warning_options << '-Wself-assign'
                warning_options << '-Wsemicolon-before-method-body'
                warning_options << '-Wsequence-point'
                warning_options << '-Wshadow'
                warning_options << '-Wshorten-64-to-32'
                warning_options << '-Wsign-compare'
                warning_options << '-Wsign-promo'
                #warning_options << '-Wsizeof-array-argument'
                warning_options << '-Wstack-protector'
                warning_options << '-Wstrict-aliasing'
                warning_options << '-Wstrict-overflow'
                warning_options << '-Wstrict-prototypes'
                warning_options << '-Wstrict-selector-match'
                warning_options << '-Wsuper-class-method-mismatch'
                warning_options << '-Wswitch-default'
                warning_options << '-Wswitch-enum'
                warning_options << '-Wswitch'
                warning_options << '-Wsynth'
                warning_options << '-Wtautological-compare'
                warning_options << '-Wtrigraphs'
                warning_options << '-Wtype-limits'
                warning_options << '-Wundeclared-selector'
                warning_options << '-Wuninitialized'
                warning_options << '-Wunknown-pragmas'
                warning_options << '-Wunnamed-type-template-args'
                #warning_options << '-Wunneeded-internal-declaration'
                #warning_options << '-Wunneeded-member-function'
                warning_options << '-Wunused-argument'
                warning_options << '-Wunused-exception-parameter'
                warning_options << '-Wunused-function'
                warning_options << '-Wunused-label'
                warning_options << '-Wunused-member-function'
                warning_options << '-Wunused-parameter'
                warning_options << '-Wunused-value'
                warning_options << '-Wunused-variable'
                warning_options << '-Wunused'
                warning_options << '-Wused-but-marked-unused'
                warning_options << '-Wvariadic-macros'
                warning_options << '-Wvector-conversions'
                warning_options << '-Wvla'
                warning_options << '-Wvolatile-register-var'
                #warning_options << '-Wwrite-string'
			when 1
				warning_options << '-Wall' << '-Werror'
			when 0
				warning_options << '-Werror'
			end


			optimization = infile.context.get_attribute_value(:c_optimization)
			optimization_options = case optimization
			when :none, nil
				['-O0']
			when :full
				['-O2']
            when :size
                ['-Os', '-fomit-frame-pointer']
			else
				optimization.split()
			end

			trace "Compiling (C) %s", infile.path
			default_options = [
				'-fsigned-char',
				'-ffast-math'
			]

			sh 'clang',
				'-MD', '-g',
				warning_options,
				optimization_options,
				default_options,
				define_options,
                #'--static',
				include_dir_options,
				system_include_dir_options,
				'-c', infile.path, '-o', make_relative(outfile) do |lines|
					for line in lines
						trace "%s", line
					end
				end

			dependencies = Dependencies.load_make_dependencies(dfilename)
			dependencies.write_lace_dependencies(dfilename)
		end
	end
end


class GccLinker < MultiFileCompiler
	def output_name
		@output_path + ( @project.globals.target_name || @project.name )
	end

	def compile( infiles )
		trace 'Linking...'
        #@verbose = true

		lib_dirs = @project.global_context.get_attribute_set( :c_lib_dir )
		libs = @project.global_context.get_attribute_list( :c_lib )

		bin_name = output_name
		mapfile_name = @output_path + 'mapfile.map'

		lib_options = libs.map do |lib|
			if lib =~ /^lib(.+)\.a$/
				['-l', $1]
			elsif lib =~ /^lib(.+)\.so$/
				['-l', $1]
			else
				['-l', lib]
			end
		end

        if @project.global_context.get_attribute_value( :no_std_lib )
            lib_options << "-nostdlib" << "-nodefaultlibs"
        end

		response_sh 'gcc',
			lib_dirs,
			infiles.map { |f| f.path },
			lib_options,
			'-o', bin_name

        if @project.global_context.get_attribute_value( :strip_executable )
            sh 'strip',
                '-s',
                '-R .comment',
                '-R .gnu.version ', 
                bin_name
            sstrip_bin = $elfkickers_bin_dir + 'sstrip'
            sh sstrip_bin,
                bin_name
        end
        if @project.global_context.get_attribute_value( :compress_executable )
            unpack_header = "dd bs=1 skip=61<$0|gunzip>/tmp/C;chmod +x /tmp/C;/tmp/C;exit"
            compressed_bin_name = bin_name.to_s + '_c'
            File.open( compressed_bin_name, "w" ) { |f| f.write( unpack_header ) }

            system "gzip -cn9 #{bin_name} >> #{compressed_bin_name}"

            bin_size = File.size( bin_name )
            compressed_bin_size = File.size( compressed_bin_name )

            p compressed_bin_name

            puts "Compressed binary from #{bin_size} Bytes to #{compressed_bin_size} Bytes (Saving #{100*(bin_size-compressed_bin_size)/(bin_size)}%)!"
        end
	end
end

define_compiler(ClangCppCompiler, :input_pattern => tag('.c'), :dependency_pattern => tag('.h'), :output_name => 'c_compiler/%.obj') do
end

define_compiler(GccLinker, :input_pattern => tag('.obj'), :output_tag => 'self') do
end


