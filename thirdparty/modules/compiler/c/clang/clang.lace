if RUBY_PLATFORM =~ /win32/

else

end

set_global_attribute :c_warning_level, 2

class ClangCppCompiler < SingleFileCompiler

	def compile( infile, outfile )
		dfilename = outfile.to_s.sub(/\.obj/, '.d')
        #@verbose = true

		check_optimized_dependencies(infile.path, dfilename) do
			system_include_dir_options = infile.context.get_attribute_set(:c_system_include_dir).map {|d|['-I', d]}
			include_dir_options = infile.context.get_attribute_set(:c_include_dir).map {|d| ['-I', d] }
			define_options = infile.context.get_attribute_set(:c_define).map {|d| ['-D', d] }
			warning_options = infile.context.get_attribute_set(:c_warning).map {|w| ['-W' + w]}

			case infile.context.get_attribute_value(:c_warning_level)
			when 2
				warning_options << '-Wall' << '-Wextra' << '-Werror'
			when 1
				warning_options << '-Wall' << '-Werror'
			when 0
				warning_options << '-Werror'
			end

			optimization = infile.context.get_attribute_value(:c_optimization)
			optimization_options = case optimization
			when :none, nil
				['-O0']
			when :full
				['-O2']
            when :size
                ['-Os', '-fomit-frame-pointer']
			else
				optimization.split()
			end

			trace "Compiling (C) %s", infile.path
			default_options = [
				'-fsigned-char',
				'-ffast-math'
			]

			sh 'clang',
				'-MD', '-g',
				warning_options,
				optimization_options,
				default_options,
				define_options,
                '--static',
				include_dir_options,
				system_include_dir_options,
				'-c', infile.path, '-o', make_relative(outfile) do |lines|
					for line in lines
						trace "%s", line
					end
				end

			dependencies = Dependencies.load_make_dependencies(dfilename)
			dependencies.write_lace_dependencies(dfilename)
		end
	end
end


class GccLinker < MultiFileCompiler
	def output_name
		@output_path + ( @project.globals.target_name || @project.name )
	end

	def compile( infiles )
		trace 'Linking...'
        #@verbose = true

		lib_dirs = @project.global_context.get_attribute_set( :c_lib_dir )
		libs = @project.global_context.get_attribute_list( :c_lib )

		bin_name = output_name
		mapfile_name = @output_path + 'mapfile.map'

		lib_options = libs.map do |lib|
			if lib =~ /^lib(.+)\.a$/
				['-l', $1]
			elsif lib =~ /^lib(.+)\.so$/
				['-l', $1]
			else
				['-l', lib]
			end
		end

        if @project.global_context.get_attribute_value( :no_std_lib )
            lib_options << "-nostdlib" << "-nodefaultlibs"
        end

		response_sh 'gcc',
			lib_dirs,
			infiles.map { |f| f.path },
			lib_options,
			'-o', bin_name
        
        if @project.global_context.get_attribute_value( :strip_executable )
            sh 'strip',
                '-s',
                '-R .comment',
                '-R .gnu.version ', 
                bin_name
            sh 'sstrip',
                bin_name
        end
        if @project.global_context.get_attribute_value( :compress_executable )
            unpack_header = "dd bs=1 skip=61<$0|gunzip>/tmp/C;chmod +x /tmp/C;/tmp/C;exit"
            compressed_bin_name = bin_name.to_s + '_c'
            File.open( compressed_bin_name, "w" ) { |f| f.write( unpack_header ) }

            system "gzip -cn9 #{bin_name} >> #{compressed_bin_name}"

            bin_size = File.size( bin_name )
            compressed_bin_size = File.size( compressed_bin_name )

            puts "Compressed binary from #{bin_size} Bytes to #{compressed_bin_size} Bytes (Saving #{100*(bin_size-compressed_bin_size)/(bin_size)}%)!"
        end
	end
end

define_compiler(ClangCppCompiler, :input_pattern => tag('.c'), :dependency_pattern => tag('.h'), :output_name => 'c_compiler/%.obj') do
end

define_compiler(GccLinker, :input_pattern => tag('.obj'), :output_tag => 'self') do
end


