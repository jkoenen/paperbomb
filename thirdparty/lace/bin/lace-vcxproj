
lib_dir = File.dirname(__FILE__) + '/../lib'
$: << lib_dir if File.directory?(lib_dir + '/lace')

require 'lace/projectwriterbase'
require 'optparse'

module Lace
	class MSBuildProjectFileWriter < ProjectFileWriterBase

		def make_local(path)
			Helpers.make_relative(path).gsub(/\//, '\\')
		end

		def write(filename, jobs)
			open_file(filename) do |file|
				project_name = @project.name
				project_guid = @project.globals.vcproj_guid || '{955F73E0-6CC7-3213-8A61-FC349BCF0D03}'

				include_key_word = "NMakeIncludeSearchPath"
				
				file.puts "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
				file.puts "<Project DefaultTargets=\"Build\" ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">"

				# add project configurations to the project file.
				file.puts "\t<ItemGroup Label=\"ProjectConfigurations\">"
				
				@builds.each do |build|
					project = find_project(build)
					platform = get_attribute(:vcproj_platform, build).first || "Win32"
					configuration_name = build.gsub(/\//, '_')
					
					file.puts "\t\t<ProjectConfiguration Include=\"#{configuration_name}|#{platform}\">\n"
					file.puts "\t\t<Configuration>#{configuration_name}</Configuration>\n"
					file.puts "\t\t<Platform>#{platform}</Platform>\n"
					file.puts "\t\t</ProjectConfiguration>\n"
				end

				file.puts "\t</ItemGroup>"
				
				file.puts "\t<PropertyGroup Label=\"Globals\">\n"
				file.puts "\t\t<ProjectGuid>#{project_guid}</ProjectGuid>\n"
				file.puts "\t\t<Keyword>MakeFileProj</Keyword>\n"
				file.puts "\t</PropertyGroup>\n"
				
				file.puts "\t<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n"
				
				@builds.each do |build|
					project = find_project(build)
					platform = get_attribute(:vcproj_platform, build).first || "Win32"
					configuration_name = build.gsub(/\//, '_')
					
					file.puts "\t<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\" Label=\"Configuration\">\n"
					file.puts "\t\t<ConfigurationType>Makefile</ConfigurationType>\n"
					file.puts "\t</PropertyGroup>\n"
				end

				file.puts "\t<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n"
				file.puts "\t\t<ImportGroup Label=\"ExtensionSettings\">\n"
				file.puts "\t</ImportGroup>\n"
				
				@builds.each do |build|
					project = find_project(build)
					platform = get_attribute(:vcproj_platform, build).first || "Win32"
					configuration_name = build.gsub(/\//, '_')
					
					file.puts "\t<ImportGroup Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\" Label=\"PropertySheets\">\n"
					file.puts "\t\t<Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n"
					file.puts "\t</ImportGroup>\n"
				end

				file.puts "\t<PropertyGroup Label=\"UserMacros\" />\n"
				
				file.puts "\t<PropertyGroup>\n"				
				file.puts "\t<_ProjectFileVersion>10.0.30319.1</_ProjectFileVersion>\n"

				@builds.each do |build|
					project = find_project(build)
					platform = get_attribute(:vcproj_platform, build).first || "Win32"
					configuration_name = build.gsub(/\//, '_')
									
					target_dir = make_local(project.build_path)
					build_cmd = build_command(build, jobs,"&quot;")

					executable_base_filename = (@project.globals.target_name || @project.name)
					executable_namer = get_attribute(:executable_name_creator, build).first
					executable_filename = executable_namer ? executable_namer.call(project, executable_base_filename) : executable_base_filename + '.exe'

					file.puts "\t<OutDir Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\">#{target_dir}\\</OutDir>\n"
					file.puts "\t<IntDir Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\">#{target_dir}\\</IntDir>\n"
					file.puts "\t<NMakeBuildCommandLine Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\">#{build_cmd}</NMakeBuildCommandLine>\n"
					file.puts "\t<NMakeReBuildCommandLine Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\">#{build_cmd} -r</NMakeReBuildCommandLine>\n"
					file.puts "\t<NMakeCleanCommandLine Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\">#{build_cmd} -c</NMakeCleanCommandLine>\n"
					file.puts "\t<NMakeOutput Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\">#{target_dir}\\#{executable_filename}</NMakeOutput>\n"
					file.write "\t<NMakeIncludeSearchPath Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\">"
						
					include_dirs = get_attribute(:cpp_include_dir, build)
					unless include_dirs.empty?
						file.write include_dirs.map {|einc| make_local(einc)}.join(';')
					end
					file.puts "</NMakeIncludeSearchPath>\n"
				end
				
				file.puts "\t</PropertyGroup>\n"
  
				file.puts "\t<ItemDefinitionGroup>\n"
				file.puts "\t</ItemDefinitionGroup>\n"
				
				filenames = get_files
	
				# now make relativ paths from the filenames
				filenames = filenames.map {|filename| make_local(filename) }

				# write file list:
				file << "\t<ItemGroup>\n"
				
				filenames.each do |filename|					
					if is_source_file( filename )
						include_type = "ClCompile"
					elsif is_header_file( filename )
						include_type = "ClInclude"
					else
						include_type = "None"
					end
					
					file << "\t\t<#{include_type} Include=\"" + filename.gsub(/\//, '\\') + "\"/>\n"
				end
				
				file << "\t</ItemGroup>\n"

				file.puts "\t<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n"
				file.puts "\t<ImportGroup Label=\"ExtensionTargets\">\n"
				file.puts "\t</ImportGroup>\n"
				file.puts "</Project>\n"				
			end
			
			filter_basename = '../' + filename.basename.to_s + '.filters'
			filter_filename = filename + filter_basename

			open_file(filter_filename) do |file|

				file.puts "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
				file.puts "<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">"
				
				filenames = get_files
	
				# collect .cpp/.hpp and other files:
				# :TODO: use tags for this..

				# now make relativ paths from the filenames
				filenames = filenames.map {|filename| make_local(filename) }
				
				source_files = []
				header_files = []
				other_files = []
				
				filter_ids = {}

				# put each file into the correct hash:
				filenames.each do |filename|
					# strip leading '../'
					namefolders = get_filter_folder_list( filename )
					
					# now we have to add all base paths up to the final one:
					for i in 0 .. namefolders.size - 1 do						
						folder_name = i == 0 ? namefolders.at(0) : folder_name + '\\' + namefolders.at( i )
						
						if (not filter_ids[ folder_name ] )
							# this is not a real guid.. but who cares..
							filter_ids[ folder_name ] = 'f325e77a-a9cb-44cb-90c1-%012x' % filter_ids.size
						end
					end
					
					if is_source_file( filename )
						source_files << filename
					elsif is_header_file( filename )
						header_files << filename
					else
						other_files << filename
					end
				end

				# write the files:
				write_file_item_group( file, source_files, 1, 'ClCompile' )
				write_file_item_group( file, header_files, 1, 'ClInclude' )
				write_file_item_group( file, other_files, 1, 'None' )
				
				# write all filters:
				file.puts "\t<ItemGroup>\n"
				filter_ids.each do |filter_name,filter_uuid|					
					file.puts "\t\t<Filter Include=\"#{filter_name}\">\n"
					file.puts "\t\t\t<UniqueIdentifier>#{filter_uuid}</UniqueIdentifier>\n"
					file.puts "\t\t</Filter>\n"
				end
				file.puts "\t</ItemGroup>\n"
			
				file.puts "</Project>\n"
			end
		end
		
		def is_source_file(filename)
			source_file_extensions = [ '.cpp', '.c', '.asm', '.s', '.cxx' ]
			source_file_extensions.include?( File.extname( filename ) )
		end

		def is_header_file(filename)			
			header_file_extensions = [ '.hpp', '.h', '.inl', '.hxx' ]				
			header_file_extensions.include?( File.extname( filename ) )
		end
		
		def get_filter_folder_list( filename )
			namefolders = filename.split(/\/|\\/)
			basename = namefolders.pop
			while namefolders.at(0) == ".."
				namefolders.shift
			end			
			return namefolders
		end

		def write_file_item_group(file, filenames, indent, prefix)
			
			file << ?\t.chr * (indent) << "<ItemGroup>\n"
			filenames.each do |filename|
				namefolders = get_filter_folder_list( filename )				
				filter_name = namefolders.join( '\\' )			

				file << ?\t.chr * (indent+1) << '<' + prefix + " Include=\"" + filename + "\">\n"				
				file << ?\t.chr * (indent+2) << "<Filter>" + filter_name + "</Filter>\n"				
				file << ?\t.chr * (indent+1) << "</" + prefix + ">\n"
			end
			
			file << ?\t.chr * (indent) << "</ItemGroup>\n"
		end
	end
end

project_file = 'project.lace'
vcproj_file = nil
vcproj_jobs = ENV['NUMBER_OF_PROCESSORS'] || '1'

OptionParser.new do |opts|
	opts.banner = "Usage: create_vcxproject.rb [OPTIONS] [BUILDS]"
	opts.on("-p", "--project PROJECT_FILE", "The project file to read (default: project.lace)") do |fname|
		project_file = fname
	end
	opts.on("-o", "--output VCXPROJ_FILENAME", "The filename of the resulting .vcproj file (default: build/<project_name>.vcxproj)") do |fname|
		vcproj_file = fname
	end
	opts.on("-j", "--jobs NUM_JOBS", Integer, "Number of compile jobs to execute in parallel") do |jobs|
		vcproj_jobs = jobs
	end
end.parse!

if ARGV.empty?
	puts 'Error: no build targets given.'
	exit 1
end

writer = Lace::MSBuildProjectFileWriter.new(project_file, ARGV)
target_name = vcproj_file ? writer.project.path + "build/#{vcproj_file}.vcxproj" : writer.project.path + "build/#{writer.project.name}.vcxproj"
writer.write(target_name, vcproj_jobs)
