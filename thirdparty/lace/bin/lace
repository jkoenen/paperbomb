#!/usr/bin/env ruby

# The +lace+ command lets you build, rebuild or clean a project. See the Lace README for more
# information about lace project definition files.
#
# The +lace+ command has the following general form:
#
#   lace [OPTIONS] [PROJECT_DEFINITION_FILE]
#
# If no PROJECT_DEFINITION_FILE is given at the command line, the file "project.lace" in the
# current directory is implied.
#
# The following options are avaiable:
#
#   -b, --build BUILD      Specifies the build target
#   -j, --jobs NUM_JOBS    Number of compile jobs to execute in parallel
#   -c, --clean            Clean build directory
#   -r, --rebuild          First clean build directory, then build
#
# Note that the --jobs option only really works with ruby >= 1.9, as previous ruby versions
# did not support native threads.

# Copyright (c) 2009 keen games
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

lib_dir = File.dirname(__FILE__) + '/../lib'
$: << lib_dir if File.directory?(lib_dir + '/lace')

require 'optparse'
require 'lace/project'
require 'lace/builder'

build = ''
num_jobs = Integer(ENV['NUMBER_OF_PROCESSORS'] || 1)
clean = false
build_path = nil

OptionParser.new do |opts|
	opts.banner = "Usage: lace [OPTIONS] [PROJECT_LACE]"
	opts.on("-b", "--build BUILD", "Specifies the build") do |b|
		build = b
	end
	opts.on("-j", "--jobs NUM_JOBS", Integer, "Number of compile jobs to execute in parallel") do |jobs|
		num_jobs = jobs
	end
	opts.on("-c", "--clean", "Clean build directory") do
		clean = true
	end
	opts.on("-r", "--rebuild", "First clean build directory, then build") do
		clean = :rebuild
	end
	opts.on("-l", "--log LEVEL", "Write logfile with logging level DEBUG, INFO, WARN, ERROR or FATAL") do |level|
		require 'logger'
		$log = Logger.new('lace.log')
		$log.level = case level.downcase
			when 'debug'; Logger::DEBUG
			when 'info'; Logger::INFO
			when 'warn'; Logger::WARN
			when 'error'; Logger::ERROR
			when 'fatal'; Logger::FATAL
			else
				printf "Unknown logging level '%s'\n", level
				exit 1
		end
	end
	opts.on("-p", "--build-path PATH", "Base build dir") do |path|
		build_path = path
	end
end.parse!

filename = ARGV.shift || 'project.lace'

project = Lace::Project.load(filename, build.split('/'), build_path)

builder = Lace::Builder.new

if clean
	builder.clean(project)
end

if !clean || clean == :rebuild
	builder.build(project, num_jobs)
end

puts 'build finished succesfully.'
