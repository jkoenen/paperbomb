build_dir = @project.build_path.to_s + '/glsl_shader'
@project.global_context.add_attribute(:c_include_dir, build_dir)

define_compiler( SingleFileCompiler, :input_pattern => tag( '.glsl' ), :output_name => 'glsl_shader/%_glsl.h') do
    def compile( infile, outfile )
        if( Helpers.newer?( infile, outfile ) )
            trace "Building GLSL source %s", infile.path

            shader_name = File.basename(infile.path,'.glsl')
           
            file_def = 'SHADER_' + File.basename(outfile).upcase.gsub(/\.| /, '_') + '_INCLUDED'
            
            FileUtils.mkpath(File.dirname(outfile))
            File.open(outfile, 'w') do |file|
                file.printf "#ifndef %s\n#define %s\n\n", file_def, file_def

                file.printf "\n#include \"graphics/glslshader.h\"\n"

                shared_code = ""
                vs_code = ""
                fs_code = ""

                state = :none

                File.readlines(infile.path).each do |line|
                    
                    if /^<SHARED>$/.match( line.strip.upcase )
                        state = :shared  
                    elsif /^<VS>$/.match( line.strip.upcase )
                        state = :vs
                    elsif /^<FS>$/.match( line.strip.upcase )
                        state = :fs
                    elsif not line.strip.empty?
                        code = "\t\"#{line.strip}\\n\"\n";
                        case state
                        when :shared
                            vs_code += code
                            fs_code += code
                        when :vs
                            vs_code += code
                        when :fs
                            fs_code += code
                        else
                        end
                    end
                end

                file.printf "\nstatic const char s_vertexShaderCode_%s[] = \n%s;\n\n", shader_name, vs_code
                file.printf "\nstatic const char s_fragmentShaderCode_%s[] = \n%s;\n\n", shader_name, fs_code

                file.printf "\nstatic const GlslShaderDefinition s_shader_%s = {s_vertexShaderCode_%s,s_fragmentShaderCode_%s,0,0,0,0};\n", shader_name, shader_name, shader_name

                file.printf "\n#endif // %s\n", file_def
            end
        end
    end
end
